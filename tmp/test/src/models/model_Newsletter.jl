# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Newsletter

    Newsletter(;
        api_key=nothing,
        creation_date=nothing,
        description=nothing,
        id=nothing,
        name=nothing,
        username=nothing,
    )

    - api_key::String
    - creation_date::ZonedDateTime
    - description::String
    - id::String
    - name::String
    - username::String
"""
Base.@kwdef mutable struct Newsletter <: OpenAPI.APIModel
    api_key::Union{Nothing, String} = nothing
    creation_date::Union{Nothing, ZonedDateTime} = nothing
    description::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing

    function Newsletter(api_key, creation_date, description, id, name, username, )
        OpenAPI.validate_property(Newsletter, Symbol("api_key"), api_key)
        OpenAPI.validate_property(Newsletter, Symbol("creation_date"), creation_date)
        OpenAPI.validate_property(Newsletter, Symbol("description"), description)
        OpenAPI.validate_property(Newsletter, Symbol("id"), id)
        OpenAPI.validate_property(Newsletter, Symbol("name"), name)
        OpenAPI.validate_property(Newsletter, Symbol("username"), username)
        return new(api_key, creation_date, description, id, name, username, )
    end
end # type Newsletter

const _property_types_Newsletter = Dict{Symbol,String}(Symbol("api_key")=>"String", Symbol("creation_date")=>"ZonedDateTime", Symbol("description")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("username")=>"String", )
OpenAPI.property_type(::Type{ Newsletter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Newsletter[name]))}

function check_required(o::Newsletter)
    o.description === nothing && (return false)
    o.name === nothing && (return false)
    o.username === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Newsletter }, name::Symbol, val)
    if name === Symbol("api_key")
        OpenAPI.validate_param(name, "Newsletter", :format, val, "uuid")
    end
    if name === Symbol("creation_date")
        OpenAPI.validate_param(name, "Newsletter", :format, val, "date-time")
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Newsletter", :format, val, "uuid")
    end
end
