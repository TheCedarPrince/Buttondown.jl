# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UploadedImage

    UploadedImage(;
        creation_date=nothing,
        id=nothing,
        image=nothing,
    )

    - creation_date::ZonedDateTime
    - id::String
    - image::String
"""
Base.@kwdef mutable struct UploadedImage <: OpenAPI.APIModel
    creation_date::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, String} = nothing
    image::Union{Nothing, String} = nothing

    function UploadedImage(creation_date, id, image, )
        OpenAPI.validate_property(UploadedImage, Symbol("creation_date"), creation_date)
        OpenAPI.validate_property(UploadedImage, Symbol("id"), id)
        OpenAPI.validate_property(UploadedImage, Symbol("image"), image)
        return new(creation_date, id, image, )
    end
end # type UploadedImage

const _property_types_UploadedImage = Dict{Symbol,String}(Symbol("creation_date")=>"ZonedDateTime", Symbol("id")=>"String", Symbol("image")=>"String", )
OpenAPI.property_type(::Type{ UploadedImage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UploadedImage[name]))}

function check_required(o::UploadedImage)
    o.image === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UploadedImage }, name::Symbol, val)
    if name === Symbol("creation_date")
        OpenAPI.validate_param(name, "UploadedImage", :format, val, "date-time")
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "UploadedImage", :format, val, "uuid")
    end
    if name === Symbol("image")
        OpenAPI.validate_param(name, "UploadedImage", :format, val, "binary")
    end
end
