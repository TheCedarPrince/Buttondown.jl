# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ScheduledEmail

    ScheduledEmail(;
        body=nothing,
        email_type=nothing,
        excluded_tags=nothing,
        id=nothing,
        included_tags=nothing,
        publish_date=nothing,
        subject=nothing,
    )

    - body::String
    - email_type::String
    - excluded_tags::Vector
    - id::String
    - included_tags::Vector
    - publish_date::ZonedDateTime
    - subject::String
"""
Base.@kwdef mutable struct ScheduledEmail <: OpenAPI.APIModel
    body::Union{Nothing, String} = nothing
    email_type::Union{Nothing, String} = nothing
    excluded_tags::Union{Nothing, Vector} = nothing
    id::Union{Nothing, String} = nothing
    included_tags::Union{Nothing, Vector} = nothing
    publish_date::Union{Nothing, ZonedDateTime} = nothing
    subject::Union{Nothing, String} = nothing

    function ScheduledEmail(body, email_type, excluded_tags, id, included_tags, publish_date, subject, )
        OpenAPI.validate_property(ScheduledEmail, Symbol("body"), body)
        OpenAPI.validate_property(ScheduledEmail, Symbol("email_type"), email_type)
        OpenAPI.validate_property(ScheduledEmail, Symbol("excluded_tags"), excluded_tags)
        OpenAPI.validate_property(ScheduledEmail, Symbol("id"), id)
        OpenAPI.validate_property(ScheduledEmail, Symbol("included_tags"), included_tags)
        OpenAPI.validate_property(ScheduledEmail, Symbol("publish_date"), publish_date)
        OpenAPI.validate_property(ScheduledEmail, Symbol("subject"), subject)
        return new(body, email_type, excluded_tags, id, included_tags, publish_date, subject, )
    end
end # type ScheduledEmail

const _property_types_ScheduledEmail = Dict{Symbol,String}(Symbol("body")=>"String", Symbol("email_type")=>"String", Symbol("excluded_tags")=>"Vector", Symbol("id")=>"String", Symbol("included_tags")=>"Vector", Symbol("publish_date")=>"ZonedDateTime", Symbol("subject")=>"String", )
OpenAPI.property_type(::Type{ ScheduledEmail }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ScheduledEmail[name]))}

function check_required(o::ScheduledEmail)
    o.body === nothing && (return false)
    o.publish_date === nothing && (return false)
    o.subject === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ScheduledEmail }, name::Symbol, val)
    if name === Symbol("email_type")
        OpenAPI.validate_param(name, "ScheduledEmail", :enum, val, ["public", "private", "premium", "promoted"])
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "ScheduledEmail", :format, val, "uuid")
    end
    if name === Symbol("publish_date")
        OpenAPI.validate_param(name, "ScheduledEmail", :format, val, "date-time")
    end
end
