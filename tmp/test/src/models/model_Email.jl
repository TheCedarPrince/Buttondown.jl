# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Email

    Email(;
        body=nothing,
        email_type=nothing,
        excluded_tags=nothing,
        external_url=nothing,
        id=nothing,
        included_tags=nothing,
        metadata=nothing,
        publish_date=nothing,
        secondary_id=nothing,
        slug=nothing,
        subject=nothing,
    )

    - body::String
    - email_type::String
    - excluded_tags::Vector
    - external_url::String
    - id::String
    - included_tags::Vector
    - metadata::Any
    - publish_date::ZonedDateTime
    - secondary_id::Int64
    - slug::String
    - subject::String
"""
Base.@kwdef mutable struct Email <: OpenAPI.APIModel
    body::Union{Nothing, String} = nothing
    email_type::Union{Nothing, String} = nothing
    excluded_tags::Union{Nothing, Vector} = nothing
    external_url::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    included_tags::Union{Nothing, Vector} = nothing
    metadata::Union{Nothing, Any} = nothing
    publish_date::Union{Nothing, ZonedDateTime} = nothing
    secondary_id::Union{Nothing, Int64} = nothing
    slug::Union{Nothing, String} = nothing
    subject::Union{Nothing, String} = nothing

    function Email(body, email_type, excluded_tags, external_url, id, included_tags, metadata, publish_date, secondary_id, slug, subject, )
        OpenAPI.validate_property(Email, Symbol("body"), body)
        OpenAPI.validate_property(Email, Symbol("email_type"), email_type)
        OpenAPI.validate_property(Email, Symbol("excluded_tags"), excluded_tags)
        OpenAPI.validate_property(Email, Symbol("external_url"), external_url)
        OpenAPI.validate_property(Email, Symbol("id"), id)
        OpenAPI.validate_property(Email, Symbol("included_tags"), included_tags)
        OpenAPI.validate_property(Email, Symbol("metadata"), metadata)
        OpenAPI.validate_property(Email, Symbol("publish_date"), publish_date)
        OpenAPI.validate_property(Email, Symbol("secondary_id"), secondary_id)
        OpenAPI.validate_property(Email, Symbol("slug"), slug)
        OpenAPI.validate_property(Email, Symbol("subject"), subject)
        return new(body, email_type, excluded_tags, external_url, id, included_tags, metadata, publish_date, secondary_id, slug, subject, )
    end
end # type Email

const _property_types_Email = Dict{Symbol,String}(Symbol("body")=>"String", Symbol("email_type")=>"String", Symbol("excluded_tags")=>"Vector", Symbol("external_url")=>"String", Symbol("id")=>"String", Symbol("included_tags")=>"Vector", Symbol("metadata")=>"Any", Symbol("publish_date")=>"ZonedDateTime", Symbol("secondary_id")=>"Int64", Symbol("slug")=>"String", Symbol("subject")=>"String", )
OpenAPI.property_type(::Type{ Email }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Email[name]))}

function check_required(o::Email)
    o.body === nothing && (return false)
    o.subject === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Email }, name::Symbol, val)
    if name === Symbol("email_type")
        OpenAPI.validate_param(name, "Email", :enum, val, ["public", "private", "premium", "promoted"])
    end
    if name === Symbol("external_url")
        OpenAPI.validate_param(name, "Email", :format, val, "uri")
    end
    if name === Symbol("external_url")
        OpenAPI.validate_param(name, "Email", :maxLength, val, 200)
        OpenAPI.validate_param(name, "Email", :pattern, val, r"^(?:[a-z0-9\.\-\+]*):\/\/(?:[^\s:@\/]+(?::[^\s:@\/]*)?@)?(?:(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)(?:\.(?:25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}|\[[0-9a-f:\.]+\]|([a-z¡-￿0-9](?:[a-z¡-￿0-9-]{0,61}[a-z¡-￿0-9])?(?:\.(?!-)[a-z¡-￿0-9-]{1,63}(?<!-))*\.(?!-)(?:[a-z¡-￿-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\.?|localhost))(?::\d{2,5})?(?:[\/?#][^\s]*)?\z")
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Email", :format, val, "uuid")
    end
    if name === Symbol("publish_date")
        OpenAPI.validate_param(name, "Email", :format, val, "date-time")
    end
    if name === Symbol("secondary_id")
        OpenAPI.validate_param(name, "Email", :maximum, val, 2147483647, false)
        OpenAPI.validate_param(name, "Email", :minimum, val, -2147483648, false)
    end
    if name === Symbol("slug")
        OpenAPI.validate_param(name, "Email", :maxLength, val, 100)
        OpenAPI.validate_param(name, "Email", :pattern, val, r"^[-a-zA-Z0-9_]+\z")
    end
end
