# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct UnsubscribersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `UnsubscribersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ UnsubscribersApi }) = "http://localhost"

const _returntypes_list_unsubscribers_UnsubscribersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListUnsubscribers200Response,
)

function _oacinternal_list_unsubscribers(_api::UnsubscribersApi; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_unsubscribers_UnsubscribersApi, "/v1/unsubscribers", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- page::Int64

Return: ListUnsubscribers200Response, OpenAPI.Clients.ApiResponse
"""
function list_unsubscribers(_api::UnsubscribersApi; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_unsubscribers(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_unsubscribers(_api::UnsubscribersApi, response_stream::Channel; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_unsubscribers(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retrieve_a_specific_unsubscriber_UnsubscribersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Subscriber,
)

function _oacinternal_retrieve_a_specific_unsubscriber(_api::UnsubscribersApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retrieve_a_specific_unsubscriber_UnsubscribersApi, "/v1/unsubscribers/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Params:
- id::String (required)

Return: Subscriber, OpenAPI.Clients.ApiResponse
"""
function retrieve_a_specific_unsubscriber(_api::UnsubscribersApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_a_specific_unsubscriber(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retrieve_a_specific_unsubscriber(_api::UnsubscribersApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_a_specific_unsubscriber(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export list_unsubscribers
export retrieve_a_specific_unsubscriber
