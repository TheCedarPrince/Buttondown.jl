# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct NewslettersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `NewslettersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ NewslettersApi }) = "http://localhost"

const _returntypes_create_a_newsletter_NewslettersApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Newsletter,
)

function _oacinternal_create_a_newsletter(_api::NewslettersApi; newsletter=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_a_newsletter_NewslettersApi, "/v1/newsletters", [], newsletter)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/x-www-form-urlencoded", "multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- newsletter::Newsletter

Return: Newsletter, OpenAPI.Clients.ApiResponse
"""
function create_a_newsletter(_api::NewslettersApi; newsletter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_a_newsletter(_api; newsletter=newsletter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_a_newsletter(_api::NewslettersApi, response_stream::Channel; newsletter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_a_newsletter(_api; newsletter=newsletter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_a_newsletter_NewslettersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_a_newsletter(_api::NewslettersApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_a_newsletter_NewslettersApi, "/v1/newsletters/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_a_newsletter(_api::NewslettersApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_a_newsletter(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_a_newsletter(_api::NewslettersApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_a_newsletter(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_all_newsletters_NewslettersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListAllNewsletters200Response,
)

function _oacinternal_list_all_newsletters(_api::NewslettersApi; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_all_newsletters_NewslettersApi, "/v1/newsletters", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- page::Int64

Return: ListAllNewsletters200Response, OpenAPI.Clients.ApiResponse
"""
function list_all_newsletters(_api::NewslettersApi; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_all_newsletters(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_all_newsletters(_api::NewslettersApi, response_stream::Channel; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_all_newsletters(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_partially_update_an_existing_newsletter_NewslettersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Newsletter,
)

function _oacinternal_partially_update_an_existing_newsletter(_api::NewslettersApi, id::String; newsletter=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_partially_update_an_existing_newsletter_NewslettersApi, "/v1/newsletters/{id}", [], newsletter)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/x-www-form-urlencoded", "multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- id::String (required)
- newsletter::Newsletter

Return: Newsletter, OpenAPI.Clients.ApiResponse
"""
function partially_update_an_existing_newsletter(_api::NewslettersApi, id::String; newsletter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_partially_update_an_existing_newsletter(_api, id; newsletter=newsletter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function partially_update_an_existing_newsletter(_api::NewslettersApi, response_stream::Channel, id::String; newsletter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_partially_update_an_existing_newsletter(_api, id; newsletter=newsletter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retrieve_an_existing_newsletter_NewslettersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Newsletter,
)

function _oacinternal_retrieve_an_existing_newsletter(_api::NewslettersApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retrieve_an_existing_newsletter_NewslettersApi, "/v1/newsletters/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- id::String (required)

Return: Newsletter, OpenAPI.Clients.ApiResponse
"""
function retrieve_an_existing_newsletter(_api::NewslettersApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_an_existing_newsletter(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retrieve_an_existing_newsletter(_api::NewslettersApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_an_existing_newsletter(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_an_existing_newsletter_NewslettersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Newsletter,
)

function _oacinternal_update_an_existing_newsletter(_api::NewslettersApi, id::String; newsletter=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_an_existing_newsletter_NewslettersApi, "/v1/newsletters/{id}", [], newsletter)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/x-www-form-urlencoded", "multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- id::String (required)
- newsletter::Newsletter

Return: Newsletter, OpenAPI.Clients.ApiResponse
"""
function update_an_existing_newsletter(_api::NewslettersApi, id::String; newsletter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_an_existing_newsletter(_api, id; newsletter=newsletter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_an_existing_newsletter(_api::NewslettersApi, response_stream::Channel, id::String; newsletter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_an_existing_newsletter(_api, id; newsletter=newsletter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_a_newsletter
export delete_a_newsletter
export list_all_newsletters
export partially_update_an_existing_newsletter
export retrieve_an_existing_newsletter
export update_an_existing_newsletter
