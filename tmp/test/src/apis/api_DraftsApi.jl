# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DraftsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DraftsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DraftsApi }) = "http://localhost"

const _returntypes_create_a_new_draft_DraftsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Draft,
)

function _oacinternal_create_a_new_draft(_api::DraftsApi; draft=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_a_new_draft_DraftsApi, "/v1/drafts", [], draft)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/x-www-form-urlencoded", "multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- draft::Draft

Return: Draft, OpenAPI.Clients.ApiResponse
"""
function create_a_new_draft(_api::DraftsApi; draft=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_a_new_draft(_api; draft=draft, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_a_new_draft(_api::DraftsApi, response_stream::Channel; draft=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_a_new_draft(_api; draft=draft, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_all_drafts_DraftsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListAllDrafts200Response,
)

function _oacinternal_list_all_drafts(_api::DraftsApi; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_all_drafts_DraftsApi, "/v1/drafts", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- page::Int64

Return: ListAllDrafts200Response, OpenAPI.Clients.ApiResponse
"""
function list_all_drafts(_api::DraftsApi; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_all_drafts(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_all_drafts(_api::DraftsApi, response_stream::Channel; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_all_drafts(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retrieve_an_existing_draft_DraftsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Draft,
)

function _oacinternal_retrieve_an_existing_draft(_api::DraftsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retrieve_an_existing_draft_DraftsApi, "/v1/drafts/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- id::String (required)

Return: Draft, OpenAPI.Clients.ApiResponse
"""
function retrieve_an_existing_draft(_api::DraftsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_an_existing_draft(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retrieve_an_existing_draft(_api::DraftsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_an_existing_draft(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_a_new_draft
export list_all_drafts
export retrieve_an_existing_draft
