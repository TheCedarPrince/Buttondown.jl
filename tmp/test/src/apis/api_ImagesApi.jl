# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ImagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ImagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ImagesApi }) = "http://localhost"

const _returntypes_delete_an_uploaded_image_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_an_uploaded_image(_api::ImagesApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_an_uploaded_image_ImagesApi, "/v1/images/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Be sure to verify that this image hasn't been referenced in your emails before deleting it!

Params:
- id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_an_uploaded_image(_api::ImagesApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_an_uploaded_image(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_an_uploaded_image(_api::ImagesApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_an_uploaded_image(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_all_uploaded_images_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListAllUploadedImages200Response,
)

function _oacinternal_list_all_uploaded_images(_api::ImagesApi; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_all_uploaded_images_ImagesApi, "/v1/images", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- page::Int64

Return: ListAllUploadedImages200Response, OpenAPI.Clients.ApiResponse
"""
function list_all_uploaded_images(_api::ImagesApi; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_all_uploaded_images(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_all_uploaded_images(_api::ImagesApi, response_stream::Channel; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_all_uploaded_images(_api; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retrieve_an_uploaded_image_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UploadedImage,
)

function _oacinternal_retrieve_an_uploaded_image(_api::ImagesApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retrieve_an_uploaded_image_ImagesApi, "/v1/images/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- id::String (required)

Return: UploadedImage, OpenAPI.Clients.ApiResponse
"""
function retrieve_an_uploaded_image(_api::ImagesApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_an_uploaded_image(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retrieve_an_uploaded_image(_api::ImagesApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_an_uploaded_image(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_a_new_image_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => UploadedImage,
)

function _oacinternal_upload_a_new_image(_api::ImagesApi; uploaded_image=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_a_new_image_ImagesApi, "/v1/images", [], uploaded_image)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/x-www-form-urlencoded", "multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""

Params:
- uploaded_image::UploadedImage

Return: UploadedImage, OpenAPI.Clients.ApiResponse
"""
function upload_a_new_image(_api::ImagesApi; uploaded_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_a_new_image(_api; uploaded_image=uploaded_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_a_new_image(_api::ImagesApi, response_stream::Channel; uploaded_image=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_a_new_image(_api; uploaded_image=uploaded_image, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_an_uploaded_image
export list_all_uploaded_images
export retrieve_an_uploaded_image
export upload_a_new_image
